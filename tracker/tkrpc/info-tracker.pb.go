// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: info-tracker.proto

package tkrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChannelState int32

const (
	ChannelState_unknown           ChannelState = 0
	ChannelState_Create            ChannelState = 10
	ChannelState_WaitFundAsset     ChannelState = 11
	ChannelState_NewTx             ChannelState = 12
	ChannelState_CanUse            ChannelState = 20
	ChannelState_Close             ChannelState = 21
	ChannelState_HtlcTx            ChannelState = 22
	ChannelState_LockByTracker     ChannelState = 23
	ChannelState_OpenChannelRefuse ChannelState = 30
)

// Enum value maps for ChannelState.
var (
	ChannelState_name = map[int32]string{
		0:  "unknown",
		10: "Create",
		11: "WaitFundAsset",
		12: "NewTx",
		20: "CanUse",
		21: "Close",
		22: "HtlcTx",
		23: "LockByTracker",
		30: "OpenChannelRefuse",
	}
	ChannelState_value = map[string]int32{
		"unknown":           0,
		"Create":            10,
		"WaitFundAsset":     11,
		"NewTx":             12,
		"CanUse":            20,
		"Close":             21,
		"HtlcTx":            22,
		"LockByTracker":     23,
		"OpenChannelRefuse": 30,
	}
)

func (x ChannelState) Enum() *ChannelState {
	p := new(ChannelState)
	*p = x
	return p
}

func (x ChannelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_tracker_proto_enumTypes[0].Descriptor()
}

func (ChannelState) Type() protoreflect.EnumType {
	return &file_info_tracker_proto_enumTypes[0]
}

func (x ChannelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelState.Descriptor instead.
func (ChannelState) EnumDescriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{0}
}

type HtlcGetPathReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayerObdNodeId  string  `protobuf:"bytes,1,opt,name=payer_obd_node_id,json=payerObdNodeId,proto3" json:"payer_obd_node_id,omitempty"`
	RealPayerPeerId string  `protobuf:"bytes,2,opt,name=real_payer_peer_id,json=realPayerPeerId,proto3" json:"real_payer_peer_id,omitempty"`
	PayeePeerId     string  `protobuf:"bytes,3,opt,name=payee_peer_id,json=payeePeerId,proto3" json:"payee_peer_id,omitempty"`
	PropertyId      int64   `protobuf:"varint,4,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
	H               string  `protobuf:"bytes,5,opt,name=h,proto3" json:"h,omitempty"`
	Amount          float64 `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *HtlcGetPathReq) Reset() {
	*x = HtlcGetPathReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HtlcGetPathReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HtlcGetPathReq) ProtoMessage() {}

func (x *HtlcGetPathReq) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HtlcGetPathReq.ProtoReflect.Descriptor instead.
func (*HtlcGetPathReq) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{0}
}

func (x *HtlcGetPathReq) GetPayerObdNodeId() string {
	if x != nil {
		return x.PayerObdNodeId
	}
	return ""
}

func (x *HtlcGetPathReq) GetRealPayerPeerId() string {
	if x != nil {
		return x.RealPayerPeerId
	}
	return ""
}

func (x *HtlcGetPathReq) GetPayeePeerId() string {
	if x != nil {
		return x.PayeePeerId
	}
	return ""
}

func (x *HtlcGetPathReq) GetPropertyId() int64 {
	if x != nil {
		return x.PropertyId
	}
	return 0
}

func (x *HtlcGetPathReq) GetH() string {
	if x != nil {
		return x.H
	}
	return ""
}

func (x *HtlcGetPathReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type HtlcGetPathRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderPeerId string  `protobuf:"bytes,1,opt,name=senderPeerId,proto3" json:"senderPeerId,omitempty"`
	H            string  `protobuf:"bytes,2,opt,name=h,proto3" json:"h,omitempty"`
	Amount       float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Path         string  `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HtlcGetPathRes) Reset() {
	*x = HtlcGetPathRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HtlcGetPathRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HtlcGetPathRes) ProtoMessage() {}

func (x *HtlcGetPathRes) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HtlcGetPathRes.ProtoReflect.Descriptor instead.
func (*HtlcGetPathRes) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{1}
}

func (x *HtlcGetPathRes) GetSenderPeerId() string {
	if x != nil {
		return x.SenderPeerId
	}
	return ""
}

func (x *HtlcGetPathRes) GetH() string {
	if x != nil {
		return x.H
	}
	return ""
}

func (x *HtlcGetPathRes) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HtlcGetPathRes) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetHtlcInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H    string `protobuf:"bytes,2,opt,name=h,proto3" json:"h,omitempty"`
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetHtlcInfoReq) Reset() {
	*x = GetHtlcInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHtlcInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHtlcInfoReq) ProtoMessage() {}

func (x *GetHtlcInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHtlcInfoReq.ProtoReflect.Descriptor instead.
func (*GetHtlcInfoReq) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{2}
}

func (x *GetHtlcInfoReq) GetH() string {
	if x != nil {
		return x.H
	}
	return ""
}

func (x *GetHtlcInfoReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SimpleFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SimpleFilter) Reset() {
	*x = SimpleFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleFilter) ProtoMessage() {}

func (x *SimpleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleFilter.ProtoReflect.Descriptor instead.
func (*SimpleFilter) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{3}
}

func (x *SimpleFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SimpleFilter) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SimpleFilter) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

//Empty response
type EmptyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRes) Reset() {
	*x = EmptyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRes) ProtoMessage() {}

func (x *EmptyRes) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRes.ProtoReflect.Descriptor instead.
func (*EmptyRes) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{4}
}

type UpdateNodeInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	P2PAddress string `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	// 1 online 2 offline
	IsOnline int32 `protobuf:"varint,5,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
}

func (x *UpdateNodeInfoReq) Reset() {
	*x = UpdateNodeInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeInfoReq) ProtoMessage() {}

func (x *UpdateNodeInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateNodeInfoReq) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateNodeInfoReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *UpdateNodeInfoReq) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *UpdateNodeInfoReq) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

//obd-node info
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//node_peer_id
	NodeId     string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	P2PAddress string `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	AccessIp   string `protobuf:"bytes,4,opt,name=access_ip,json=accessIp,proto3" json:"access_ip,omitempty"`
	// 1 online 2 offline
	IsOnline        int32 `protobuf:"varint,5,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	HearBeatCounter int32 `protobuf:"varint,6,opt,name=hear_beat_counter,json=hearBeatCounter,proto3" json:"hear_beat_counter,omitempty"`
	LastHearBeat    int64 `protobuf:"varint,7,opt,name=last_hear_beat,json=lastHearBeat,proto3" json:"last_hear_beat,omitempty"`
	//unix timestamp in seconds ; google.protobuf.Timestamp will more better,but sql database not support.
	UpdatedAt int64 `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{6}
}

func (x *NodeInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeInfo) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *NodeInfo) GetAccessIp() string {
	if x != nil {
		return x.AccessIp
	}
	return ""
}

func (x *NodeInfo) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *NodeInfo) GetHearBeatCounter() int32 {
	if x != nil {
		return x.HearBeatCounter
	}
	return 0
}

func (x *NodeInfo) GetLastHearBeat() int64 {
	if x != nil {
		return x.LastHearBeat
	}
	return 0
}

func (x *NodeInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *NodeInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

//obd-user-info
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//user_peer_id
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	//node_peer_id
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// 1 online 2 offline
	IsOnline  int32  `protobuf:"varint,4,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	AccessIp  string `protobuf:"bytes,5,opt,name=access_ip,json=accessIp,proto3" json:"access_ip,omitempty"`
	UpdatedAt int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *UserInfo) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *UserInfo) GetAccessIp() string {
	if x != nil {
		return x.AccessIp
	}
	return ""
}

func (x *UserInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type UpdateUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NodeId     string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	P2PAddress string `protobuf:"bytes,3,opt,name=p2p_address,json=p2pAddress,proto3" json:"p2p_address,omitempty"`
	// 1 online 2 offline
	IsOnline int32 `protobuf:"varint,4,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
}

func (x *UpdateUserInfoReq) Reset() {
	*x = UpdateUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoReq) ProtoMessage() {}

func (x *UpdateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateUserInfoReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserInfoReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *UpdateUserInfoReq) GetP2PAddress() string {
	if x != nil {
		return x.P2PAddress
	}
	return ""
}

func (x *UpdateUserInfoReq) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

type UpdateUserInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateUserInfoReqs []*UpdateUserInfoReq `protobuf:"bytes,1,rep,name=UpdateUserInfoReqs,proto3" json:"UpdateUserInfoReqs,omitempty"`
}

func (x *UpdateUserInfosReq) Reset() {
	*x = UpdateUserInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfosReq) ProtoMessage() {}

func (x *UpdateUserInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfosReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfosReq) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateUserInfosReq) GetUpdateUserInfoReqs() []*UpdateUserInfoReq {
	if x != nil {
		return x.UpdateUserInfoReqs
	}
	return nil
}

type UpdateChannelInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelInfos []*ChannelInfo `protobuf:"bytes,1,rep,name=ChannelInfos,proto3" json:"ChannelInfos,omitempty"`
}

func (x *UpdateChannelInfosReq) Reset() {
	*x = UpdateChannelInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelInfosReq) ProtoMessage() {}

func (x *UpdateChannelInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelInfosReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelInfosReq) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateChannelInfosReq) GetChannelInfos() []*ChannelInfo {
	if x != nil {
		return x.ChannelInfos
	}
	return nil
}

type ChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ObdNodeIda string       `protobuf:"bytes,2,opt,name=obd_node_ida,json=obdNodeIda,proto3" json:"obd_node_ida,omitempty"`
	ObdNodeIdb string       `protobuf:"bytes,3,opt,name=obd_node_idb,json=obdNodeIdb,proto3" json:"obd_node_idb,omitempty"`
	ChannelId  string       `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PropertyId int64        `protobuf:"varint,5,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
	CurrState  ChannelState `protobuf:"varint,6,opt,name=curr_state,json=currState,proto3,enum=tkrpc.ChannelState" json:"curr_state,omitempty"`
	PeerIda    string       `protobuf:"bytes,7,opt,name=peer_ida,json=peerIda,proto3" json:"peer_ida,omitempty"`
	PeerIdb    string       `protobuf:"bytes,8,opt,name=peer_idb,json=peerIdb,proto3" json:"peer_idb,omitempty"`
	AmountA    float64      `protobuf:"fixed64,9,opt,name=amount_a,json=amountA,proto3" json:"amount_a,omitempty"`
	AmountB    float64      `protobuf:"fixed64,10,opt,name=amount_b,json=amountB,proto3" json:"amount_b,omitempty"`
	UpdatedAt  int64        `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt  int64        `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	//database will not store it
	IsAlice bool `protobuf:"varint,13,opt,name=is_alice,json=isAlice,proto3" json:"is_alice,omitempty"`
	//database will not store it
	NodeId string `protobuf:"bytes,14,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *ChannelInfo) Reset() {
	*x = ChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfo) ProtoMessage() {}

func (x *ChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelInfo) GetObdNodeIda() string {
	if x != nil {
		return x.ObdNodeIda
	}
	return ""
}

func (x *ChannelInfo) GetObdNodeIdb() string {
	if x != nil {
		return x.ObdNodeIdb
	}
	return ""
}

func (x *ChannelInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelInfo) GetPropertyId() int64 {
	if x != nil {
		return x.PropertyId
	}
	return 0
}

func (x *ChannelInfo) GetCurrState() ChannelState {
	if x != nil {
		return x.CurrState
	}
	return ChannelState_unknown
}

func (x *ChannelInfo) GetPeerIda() string {
	if x != nil {
		return x.PeerIda
	}
	return ""
}

func (x *ChannelInfo) GetPeerIdb() string {
	if x != nil {
		return x.PeerIdb
	}
	return ""
}

func (x *ChannelInfo) GetAmountA() float64 {
	if x != nil {
		return x.AmountA
	}
	return 0
}

func (x *ChannelInfo) GetAmountB() float64 {
	if x != nil {
		return x.AmountB
	}
	return 0
}

func (x *ChannelInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ChannelInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ChannelInfo) GetIsAlice() bool {
	if x != nil {
		return x.IsAlice
	}
	return false
}

func (x *ChannelInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type ListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//page number
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	//page size
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	//sort set the sql order-by  sort=[-]field_name .  example sort=-updated_at will sort by:"desc id";sort=updated_at  sort by:"asc id"
	Sort   string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListReq) Reset() {
	*x = ListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReq) ProtoMessage() {}

func (x *ListReq) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReq.ProtoReflect.Descriptor instead.
func (*ListReq) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{12}
}

func (x *ListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserInfosRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int64       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Results []*UserInfo `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *UserInfosRes) Reset() {
	*x = UserInfosRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfosRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfosRes) ProtoMessage() {}

func (x *UserInfosRes) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfosRes.ProtoReflect.Descriptor instead.
func (*UserInfosRes) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{13}
}

func (x *UserInfosRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserInfosRes) GetResults() []*UserInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

type NodeInfosRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int64       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Results []*NodeInfo `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *NodeInfosRes) Reset() {
	*x = NodeInfosRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfosRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfosRes) ProtoMessage() {}

func (x *NodeInfosRes) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfosRes.ProtoReflect.Descriptor instead.
func (*NodeInfosRes) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{14}
}

func (x *NodeInfosRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NodeInfosRes) GetResults() []*NodeInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

type ChannelInfosRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int64          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Results []*ChannelInfo `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ChannelInfosRes) Reset() {
	*x = ChannelInfosRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfosRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfosRes) ProtoMessage() {}

func (x *ChannelInfosRes) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfosRes.ProtoReflect.Descriptor instead.
func (*ChannelInfosRes) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{15}
}

func (x *ChannelInfosRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ChannelInfosRes) GetResults() []*ChannelInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

type HtlcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path          string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	H             string `protobuf:"bytes,3,opt,name=h,proto3" json:"h,omitempty"`
	R             string `protobuf:"bytes,4,opt,name=r,proto3" json:"r,omitempty"`
	DirectionFlag int32  `protobuf:"varint,5,opt,name=direction_flag,json=directionFlag,proto3" json:"direction_flag,omitempty"`
	CurrChannelId string `protobuf:"bytes,6,opt,name=curr_channel_id,json=currChannelId,proto3" json:"curr_channel_id,omitempty"`
	UpdatedAt     int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt     int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *HtlcInfo) Reset() {
	*x = HtlcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HtlcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HtlcInfo) ProtoMessage() {}

func (x *HtlcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HtlcInfo.ProtoReflect.Descriptor instead.
func (*HtlcInfo) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{16}
}

func (x *HtlcInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HtlcInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HtlcInfo) GetH() string {
	if x != nil {
		return x.H
	}
	return ""
}

func (x *HtlcInfo) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *HtlcInfo) GetDirectionFlag() int32 {
	if x != nil {
		return x.DirectionFlag
	}
	return 0
}

func (x *HtlcInfo) GetCurrChannelId() string {
	if x != nil {
		return x.CurrChannelId
	}
	return ""
}

func (x *HtlcInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HtlcInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type LockHtlcPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// 0 创建，1，标记作废，2 标记通知完成
	CurrState int32 `protobuf:"varint,3,opt,name=curr_state,json=currState,proto3" json:"curr_state,omitempty"`
	CreatedAt int64 `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *LockHtlcPath) Reset() {
	*x = LockHtlcPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_tracker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockHtlcPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockHtlcPath) ProtoMessage() {}

func (x *LockHtlcPath) ProtoReflect() protoreflect.Message {
	mi := &file_info_tracker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockHtlcPath.ProtoReflect.Descriptor instead.
func (*LockHtlcPath) Descriptor() ([]byte, []int) {
	return file_info_tracker_proto_rawDescGZIP(), []int{17}
}

func (x *LockHtlcPath) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LockHtlcPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LockHtlcPath) GetCurrState() int32 {
	if x != nil {
		return x.CurrState
	}
	return 0
}

func (x *LockHtlcPath) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LockHtlcPath) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

var File_info_tracker_proto protoreflect.FileDescriptor

var file_info_tracker_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x22, 0xd3, 0x01, 0x0a, 0x0e,
	0x48, 0x74, 0x6c, 0x63, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x12, 0x29,
	0x0a, 0x11, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x4f, 0x62, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x65, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x65, 0x65, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x6e, 0x0a, 0x0e, 0x48, 0x74, 0x6c, 0x63, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x32, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x0a, 0x0a,
	0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x32, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x32, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x5f, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x42, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x5f,
	0x62, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x72, 0x42, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0x5e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x52,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0xb3, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x62, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x62, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74,
	0x6b, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x62, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x69,
	0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x07, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x0c, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x08, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8f, 0x01,
	0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x48, 0x74, 0x6c, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a,
	0x92, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05,
	0x4e, 0x65, 0x77, 0x54, 0x78, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x55, 0x73,
	0x65, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x15, 0x12, 0x0a,
	0x0a, 0x06, 0x48, 0x74, 0x6c, 0x63, 0x54, 0x78, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f,
	0x63, 0x6b, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x17, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x10, 0x1e, 0x32, 0xb9, 0x06, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x12, 0x18, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x74, 0x6b,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x28, 0x01, 0x12, 0x3b,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x74, 0x6b, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e,
	0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x6b,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x33, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x0e, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x0e, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x2e, 0x74,
	0x6b, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x12, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1c, 0x2e, 0x74, 0x6b, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x74, 0x6b,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x12, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x0e, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x74, 0x6b, 0x72,
	0x70, 0x63, 0x2e, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0f, 0x2e, 0x74, 0x6b,
	0x72, 0x70, 0x63, 0x2e, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0b,
	0x48, 0x74, 0x6c, 0x63, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x2e, 0x74, 0x6b,
	0x72, 0x70, 0x63, 0x2e, 0x48, 0x74, 0x6c, 0x63, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x74, 0x6c, 0x63, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x74, 0x6b, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_info_tracker_proto_rawDescOnce sync.Once
	file_info_tracker_proto_rawDescData = file_info_tracker_proto_rawDesc
)

func file_info_tracker_proto_rawDescGZIP() []byte {
	file_info_tracker_proto_rawDescOnce.Do(func() {
		file_info_tracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_tracker_proto_rawDescData)
	})
	return file_info_tracker_proto_rawDescData
}

var file_info_tracker_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_info_tracker_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_info_tracker_proto_goTypes = []interface{}{
	(ChannelState)(0),             // 0: tkrpc.ChannelState
	(*HtlcGetPathReq)(nil),        // 1: tkrpc.HtlcGetPathReq
	(*HtlcGetPathRes)(nil),        // 2: tkrpc.HtlcGetPathRes
	(*GetHtlcInfoReq)(nil),        // 3: tkrpc.GetHtlcInfoReq
	(*SimpleFilter)(nil),          // 4: tkrpc.SimpleFilter
	(*EmptyRes)(nil),              // 5: tkrpc.EmptyRes
	(*UpdateNodeInfoReq)(nil),     // 6: tkrpc.UpdateNodeInfoReq
	(*NodeInfo)(nil),              // 7: tkrpc.NodeInfo
	(*UserInfo)(nil),              // 8: tkrpc.UserInfo
	(*UpdateUserInfoReq)(nil),     // 9: tkrpc.UpdateUserInfoReq
	(*UpdateUserInfosReq)(nil),    // 10: tkrpc.UpdateUserInfosReq
	(*UpdateChannelInfosReq)(nil), // 11: tkrpc.UpdateChannelInfosReq
	(*ChannelInfo)(nil),           // 12: tkrpc.ChannelInfo
	(*ListReq)(nil),               // 13: tkrpc.ListReq
	(*UserInfosRes)(nil),          // 14: tkrpc.UserInfosRes
	(*NodeInfosRes)(nil),          // 15: tkrpc.NodeInfosRes
	(*ChannelInfosRes)(nil),       // 16: tkrpc.ChannelInfosRes
	(*HtlcInfo)(nil),              // 17: tkrpc.HtlcInfo
	(*LockHtlcPath)(nil),          // 18: tkrpc.LockHtlcPath
}
var file_info_tracker_proto_depIdxs = []int32{
	9,  // 0: tkrpc.UpdateUserInfosReq.UpdateUserInfoReqs:type_name -> tkrpc.UpdateUserInfoReq
	12, // 1: tkrpc.UpdateChannelInfosReq.ChannelInfos:type_name -> tkrpc.ChannelInfo
	0,  // 2: tkrpc.ChannelInfo.curr_state:type_name -> tkrpc.ChannelState
	8,  // 3: tkrpc.UserInfosRes.results:type_name -> tkrpc.UserInfo
	7,  // 4: tkrpc.NodeInfosRes.results:type_name -> tkrpc.NodeInfo
	12, // 5: tkrpc.ChannelInfosRes.results:type_name -> tkrpc.ChannelInfo
	6,  // 6: tkrpc.InfoTracker.HeartBeat:input_type -> tkrpc.UpdateNodeInfoReq
	6,  // 7: tkrpc.InfoTracker.UpdateNodeInfo:input_type -> tkrpc.UpdateNodeInfoReq
	9,  // 8: tkrpc.InfoTracker.UpdateUserInfo:input_type -> tkrpc.UpdateUserInfoReq
	10, // 9: tkrpc.InfoTracker.UpdateUserInfos:input_type -> tkrpc.UpdateUserInfosReq
	9,  // 10: tkrpc.InfoTracker.GetUserInfo:input_type -> tkrpc.UpdateUserInfoReq
	13, // 11: tkrpc.InfoTracker.GetUserInfos:input_type -> tkrpc.ListReq
	13, // 12: tkrpc.InfoTracker.GetNodes:input_type -> tkrpc.ListReq
	12, // 13: tkrpc.InfoTracker.UpdateChannelInfo:input_type -> tkrpc.ChannelInfo
	11, // 14: tkrpc.InfoTracker.UpdateChannelInfos:input_type -> tkrpc.UpdateChannelInfosReq
	4,  // 15: tkrpc.InfoTracker.GetChannelInfo:input_type -> tkrpc.SimpleFilter
	13, // 16: tkrpc.InfoTracker.GetChannels:input_type -> tkrpc.ListReq
	17, // 17: tkrpc.InfoTracker.UpdateHtlcInfo:input_type -> tkrpc.HtlcInfo
	1,  // 18: tkrpc.InfoTracker.HtlcGetPath:input_type -> tkrpc.HtlcGetPathReq
	3,  // 19: tkrpc.InfoTracker.GetHtlcInfo:input_type -> tkrpc.GetHtlcInfoReq
	5,  // 20: tkrpc.InfoTracker.HeartBeat:output_type -> tkrpc.EmptyRes
	5,  // 21: tkrpc.InfoTracker.UpdateNodeInfo:output_type -> tkrpc.EmptyRes
	5,  // 22: tkrpc.InfoTracker.UpdateUserInfo:output_type -> tkrpc.EmptyRes
	5,  // 23: tkrpc.InfoTracker.UpdateUserInfos:output_type -> tkrpc.EmptyRes
	8,  // 24: tkrpc.InfoTracker.GetUserInfo:output_type -> tkrpc.UserInfo
	14, // 25: tkrpc.InfoTracker.GetUserInfos:output_type -> tkrpc.UserInfosRes
	15, // 26: tkrpc.InfoTracker.GetNodes:output_type -> tkrpc.NodeInfosRes
	12, // 27: tkrpc.InfoTracker.UpdateChannelInfo:output_type -> tkrpc.ChannelInfo
	5,  // 28: tkrpc.InfoTracker.UpdateChannelInfos:output_type -> tkrpc.EmptyRes
	12, // 29: tkrpc.InfoTracker.GetChannelInfo:output_type -> tkrpc.ChannelInfo
	15, // 30: tkrpc.InfoTracker.GetChannels:output_type -> tkrpc.NodeInfosRes
	17, // 31: tkrpc.InfoTracker.UpdateHtlcInfo:output_type -> tkrpc.HtlcInfo
	2,  // 32: tkrpc.InfoTracker.HtlcGetPath:output_type -> tkrpc.HtlcGetPathRes
	17, // 33: tkrpc.InfoTracker.GetHtlcInfo:output_type -> tkrpc.HtlcInfo
	20, // [20:34] is the sub-list for method output_type
	6,  // [6:20] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_info_tracker_proto_init() }
func file_info_tracker_proto_init() {
	if File_info_tracker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_info_tracker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HtlcGetPathReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HtlcGetPathRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHtlcInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfosRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfosRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfosRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HtlcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_tracker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockHtlcPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_tracker_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_info_tracker_proto_goTypes,
		DependencyIndexes: file_info_tracker_proto_depIdxs,
		EnumInfos:         file_info_tracker_proto_enumTypes,
		MessageInfos:      file_info_tracker_proto_msgTypes,
	}.Build()
	File_info_tracker_proto = out.File
	file_info_tracker_proto_rawDesc = nil
	file_info_tracker_proto_goTypes = nil
	file_info_tracker_proto_depIdxs = nil
}
